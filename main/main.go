package main

import (
	"fmt"
	"time"

	"github.com/Mukhameds/MVP_ARU_AGI/core/flowengine"
	"github.com/Mukhameds/MVP_ARU_AGI/core/signalengine"
	"github.com/Mukhameds/MVP_ARU_AGI/core/memoryengine"
	"github.com/Mukhameds/MVP_ARU_AGI/core/instinctcore"
	"github.com/Mukhameds/MVP_ARU_AGI/core/reflexengine"
	"github.com/Mukhameds/MVP_ARU_AGI/core/ghostfield"
	"github.com/Mukhameds/MVP_ARU_AGI/core/hemisphere"
	"github.com/Mukhameds/MVP_ARU_AGI/core/consciousnesshub"
	"github.com/Mukhameds/MVP_ARU_AGI/types"
)

func main() {
	fmt.Println("üîµ ARU-MVP initializing...")

	// –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
	memoryengine.InitMemory()
	flowengine.InitFlowEngine(1)
	hemisphere.ActivateHemispheres([]string{"logic", "emotion", "goal"})
	reflexengine.LoadDefaultReflexes()
	instinctcore.LoadInstincts()
	signalengine.InitSignalEngine()

	// –•–∞–± —Å–æ–∑–Ω–∞–Ω–∏—è
	consciousnesshub.InitHub("ARU-CORE-01")

	// –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
	go loopGhostField()
	go loopInstincts()
	go loopObserve()
	go loopMotive()
	go loopSelfReflect()

	fmt.Println("‚úÖ ARU-MVP ready.")

	select {}
}

func loopGhostField() {
	for {
		ghostfield.TickGhostField()
		time.Sleep(5 * time.Second)
	}
}

func loopInstincts() {
	for {
		instinctcore.TickInstincts()
		time.Sleep(3 * time.Second)
	}
}

func loopObserve() {
	for {
		time.Sleep(10 * time.Second)
		fmt.Println()
		fmt.Println("üåÄ OBSERVE:")
		consciousnesshub.Observe()
		fmt.Println()
	}
}

func loopMotive() {
	for {
		time.Sleep(15 * time.Second)
		fmt.Println("[MotiveEngine] üß≠ Internal check for purpose...")

		if len(consciousnesshub.Hub.WillSnapshot) < 3 {
			fmt.Println("[MotiveEngine] No active drive. Triggering phantom.")
			ghostfield.TickGhostField()
		}
	}
}


func loopSelfReflect() {
	for {
		time.Sleep(30 * time.Second)
		fmt.Println("[SelfReflect] üîç Starting reflection cycle...")

		for id, qbit := range memoryengine.SemanticMemory {
			if len(qbit.LinkedTo) >= 3 && qbit.Emotion > 0.5 {
				fmt.Printf("[SelfReflect] ‚ö° Focus node: %s ‚Äî strong, emotional, linked\n", id)
			}

			if len(qbit.LinkedTo) == 0 {
				fmt.Printf("[SelfReflect] üß© Isolated node: %s ‚Äî may need clarification\n", id)

				// üö® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–Ω—Ç–æ–º-—Å–∏–≥–Ω–∞–ª –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º—ã—Å–ª–∏
				signal := types.Signal{
					ID:    "phantom_" + id,
					Type:  "phantom",
					Content: "clarify " + qbit.State,
					Mass:    1.0,
					EmotionalTag: map[string]float64{
						"curiosity": 0.6,
					},
				}

				// –í—Å—Ç–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ —Å–∏—Å—Ç–µ–º—É
				fmt.Printf("[SelfReflect] üîÆ Emitting phantom to clarify: %s\n", qbit.State)
				signalengine.ReceiveSignal(signal)
			}
		}
	}
}

