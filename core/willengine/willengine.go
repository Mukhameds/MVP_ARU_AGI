package willengine

import (
	"fmt"

	"github.com/Mukhameds/MVP_ARU_AGI/types"
	"github.com/Mukhameds/MVP_ARU_AGI/core/memoryengine" // üîß –∏–º–ø–æ—Ä—Ç
)

// Will ‚Äî –≤–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º—ã—Å–ª–∏
type Will struct {
	ID       string
	SignalID string
	Goal     string
	Power    float64
	Active   bool
}

var WillPool []Will

// GenerateWill ‚Äî –Ω–∞ –æ—Å–Ω–æ–≤–µ –º—ã—Å–ª–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ª—é
func GenerateWill(signal types.Signal) Will {
	power := signal.Mass * 0.5 // –£—Å–∏–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å—Å—ã —Å–∏–≥–Ω–∞–ª–∞
	if tag, ok := signal.EmotionalTag["fear"]; ok {
		power += tag * 0.5 // –£—Å–∏–ª–∏–≤–∞–µ–º –≤–æ–ª—é, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–∞—Ö
	}
	
	goal := signal.Content // –¶–µ–ª—å –ø–æ —Å–∏–≥–Ω–∞–ª—É

	w := Will{
		ID:       "will_" + signal.ID,
		SignalID: signal.ID,
		Power:    power,
		Goal:     goal,
		Active:   true,
	}

	WillPool = append(WillPool, w)
	fmt.Printf("[WillEngine] Will generated: %s ‚Üí %s (power=%.2f)\n", w.ID, w.Goal, w.Power)

	// üîß –£—Å–∏–ª–∏–≤–∞–µ–º –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–≤—è–∑—å –≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏
	memoryengine.LinkQBits("thought_" + signal.ID, w.ID, 1.0)


	return w
}

// ProcessWill ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ–ª–∏
func ProcessWill(w Will) {
	if !w.Active {
		return
	}

	fmt.Printf("[WillEngine] Acting on will: %s ‚Üí %s (power=%.2f)\n", w.ID, w.Goal, w.Power)

	switch w.Goal {
	case "defend_self":
		act("Activate defense system")
	case "search_area":
		act("Scan environment for anomalies")
	case "fulfill_goal":
		act("Execute assigned objective from Architect")
	case "gain_knowledge":
		act("Query internal memory and seek new patterns")
	case "escape_danger":
		act("Initiate retreat or avoidance maneuver")
	case "clarify_direction":
		act("Generate phantom: clarify current purpose")
	default:
		act("Reflect internally on goal: " + w.Goal)
	}

	w.Active = false
}

// act ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
func act(description string) {
	fmt.Printf("[Action] ‚û§ %s\n", description)
}
