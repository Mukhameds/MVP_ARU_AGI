package memoryengine

import (
	"fmt"
	"time"
)

// SemanticQBit ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–º—ã—Å–ª–æ–≤–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –ø–∞–º—è—Ç–∏
type SemanticQBit struct {
	ID        string
	State     string
	Context   []string         // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä. ["exploration", "danger"])
	Tags      []string         // –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–ª–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏
	Emotion   float64          // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
	LinkedTo  map[string]float64 // ID –¥—Ä—É–≥–∏—Ö QBit'–æ–≤ –∏ —Å–∏–ª–∞ —Å–≤—è–∑–∏
	Timestamp time.Time
}

var SemanticMemory = make(map[string]*SemanticQBit)

// SaveSemantic ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π QBit
func SaveSemantic(id, state string, context, tags []string, emotion float64) {
	q := &SemanticQBit{
		ID:        id,
		State:     state,
		Context:   context,
		Tags:      tags,
		Emotion:   emotion,
		LinkedTo:  make(map[string]float64),
		Timestamp: time.Now(),
	}
	SemanticMemory[id] = q
	fmt.Printf("[SemanticMemory] Saved QBit: %s | Tags: %v | Emotion: %.2f\n", id, tags, emotion)
}

// LinkQBits ‚Äî —Å–æ–∑–¥–∞—Ç—å/—É—Å–∏–ª–∏—Ç—å —Å–≤—è–∑—å –º–µ–∂–¥—É –¥–≤—É–º—è QBits
func LinkQBits(id1, id2 string, strength float64) {
	q1, ok1 := SemanticMemory[id1]
	q2, ok2 := SemanticMemory[id2]
	if !ok1 || !ok2 {
		fmt.Println("[SemanticMemory] Link failed: QBit not found")
		return
	}
	q1.LinkedTo[id2] += strength
	q2.LinkedTo[id1] += strength
	fmt.Printf("[SemanticMemory] Linked %s ‚Üî %s (+%.2f)\n", id1, id2, strength)
}

// RecallByTag ‚Äî –Ω–∞–π—Ç–∏ –≤—Å–µ QBits –ø–æ —Ç–µ–≥—É
func RecallByTag(tag string) []*SemanticQBit {
	var result []*SemanticQBit
	for _, q := range SemanticMemory {
		for _, t := range q.Tags {
			if t == tag {
				result = append(result, q)
				break
			}
		}
	}
	return result
}

// StrengthenLink ‚Äî —É—Å–∏–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤—è–∑—å
func StrengthenLink(id1, id2 string, delta float64) {
	LinkQBits(id1, id2, delta)
}

// PrintNetwork ‚Äî –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
func PrintNetwork() {
	fmt.Println("üß† Semantic Memory Network:")
	for _, q := range SemanticMemory {
		fmt.Printf(" - [%s] %s | Tags: %v | Links: %v\n", q.ID, q.State, q.Tags, q.LinkedTo)
	}
}
