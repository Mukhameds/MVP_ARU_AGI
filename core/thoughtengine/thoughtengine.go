package thoughtengine

import (
	"fmt"
	"time"
	"github.com/Mukhameds/MVP_ARU_AGI/types"
	"github.com/Mukhameds/MVP_ARU_AGI/core/flowengine"
	"github.com/Mukhameds/MVP_ARU_AGI/core/emotionengine"
	"github.com/Mukhameds/MVP_ARU_AGI/core/willengine"
	"github.com/Mukhameds/MVP_ARU_AGI/core/memoryengine"
)

type Thought struct {
	ID       string
	Signal   types.Signal
	Priority float64
	Form     string
	Thread   flowengine.ThoughtThread
}

var ThoughtPool []Thought
var lastEmotion types.Emotion

// ReceiveSignal ‚Äî –ø—Ä–∏—ë–º —Å–∏–≥–Ω–∞–ª–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º—ã—Å–ª–∏
func ReceiveSignal(signal types.Signal) Thought {
	priority := emotionengine.ComputePriority(signal)
	emotion := emotionengine.GenerateEmotion(signal)

	th := Thought{
		ID:       "thought_" + signal.ID,
		Signal:   signal,
		Priority: priority,
		Form:     DetectForm(signal),
	}

	// —Å–æ–∑–¥–∞—ë–º –ø–æ—Ç–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
	thread := flowengine.CreateThread(signal)
	th.Thread = thread

	// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Pool
	ThoughtPool = append(ThoughtPool, th)
	lastEmotion = emotion

	fmt.Printf("[ThoughtEngine] New thought: %s (form=%s, priority=%.2f)\n", th.ID, th.Form, th.Priority)

// –ï—Å–ª–∏ –º—ã—Å–ª—å —Å —Ç–∞–∫–∏–º ID —É–∂–µ –≤ –ø–∞–º—è—Ç–∏ ‚Äî —É—Å–∏–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å –∏ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
if existing, ok := memoryengine.SemanticMemory[th.ID]; ok {
	memoryengine.StrengthenLink(th.ID, th.ID, 0.2) // —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è
	existing.Emotion = (existing.Emotion + emotion.Power) / 2
	existing.Timestamp = time.Now()

	fmt.Printf("[ThoughtEngine] üîÅ Thought already exists: %s ‚Äî strengthened.\n", th.ID)
	return th // ‚õî –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º ‚Äî –≤–æ–ª—è —É–∂–µ –º–æ–≥–ª–∞ –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞
}


	// üß† –°–æ—Ö—Ä–∞–Ω—è–µ–º –º—ã—Å–ª—å –≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –ø–∞–º—è—Ç—å
	memoryengine.SaveSemantic(
		th.ID,
		signal.Content,
		[]string{signal.Type, th.Form},
		[]string{"thought"},
		emotion.Power,
	)

	// ‚úÖ –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –º—ã—Å–ª—å —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∞ ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ª—é
	if priority > 0.5 {
		flowengine.Schedule(signal)
		willengine.GenerateWill(signal)
	}

	return th
}


// LastEmotion ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —ç–º–æ—Ü–∏—é
func LastEmotion() types.Emotion {
	return lastEmotion
}

// DetectForm ‚Äî —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –º—ã—Å–ª–∏
func DetectForm(signal types.Signal) string {
	switch signal.Type {
	case "goal":
		return "deductive"
	case "error", "paradox":
		return "critical"
	case "emotion":
		return "introspective"
	case "phantom":
		return "abductive"
	default:
		return "generic"
	}
}
